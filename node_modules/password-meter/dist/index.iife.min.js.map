{"version":3,"file":"index.iife.min.js","sources":["../src/index.ts"],"sourcesContent":["export interface IRequirement {\n    minLength?: number | IMessage;\n    maxLength?: number | IMessage;\n    uniqueLettersMinLength?: number | IMessage;\n    uppercaseLettersMinLength?: number | IMessage;\n    lowercaseLettersMinLength?: number | IMessage;\n    numbersMinLength?: number | IMessage;\n    symbolsMinLength?: number | IMessage;\n    include?: string[] | IMessage;\n    exclude?: string[] | IMessage;\n    blackList?: string[] | IMessage;\n    startsWith?: string | IMessage;\n    endsWith?: string | IMessage;\n    includeOne?: string[] | IMessage;\n}\n\nexport interface IMessage {\n    value: number | string | string[];\n    message: string;\n}\n\nexport interface IResult {\n    score: number;\n    status: string;\n    percent: number;\n    errors?: string | string[];\n}\n\nexport class PasswordMeter {\n    private uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    private lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\n    private numbers = '1234567890';\n    constructor(public requirements?: IRequirement, public scoreRange?: any) {}\n\n    private startsWith(str: string, word: string): boolean {\n        return str.lastIndexOf(word, 0) === 0;\n    }\n\n    private endsWith(str: string, word: string): boolean {\n        return str.indexOf(word, str.length - word.length) !== -1;\n    }\n\n    private chunkString(str: string, len: number): string[] {\n        const _size = Math.ceil(str.length / len),\n            _ret = new Array(_size);\n        let _offset = 0;\n        for (let _i = 0; _i < _size; _i++) {\n            _offset = _i * len;\n            _ret[_i] = str.substring(_offset, _offset + len);\n        }\n        return _ret;\n    }\n    private getLength(text: string): number {\n        if (text) {\n            return text.length;\n        }\n        return 0;\n    }\n    private doesNotContains(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const doesnotContainsAll = list.every((x) => text.indexOf(x) == -1);\n                return doesnotContainsAll;\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n    private contains(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const containsAll = list.every((x) => text.indexOf(x) >= 0);\n                return containsAll;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    private containsOne(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const contains = list.some((x) => text.indexOf(x) >= 0);\n                return contains;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private isInBlackList(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                for (let index = 0; index < list.length; index++) {\n                    if (text === list[index]) {\n                        return true;\n                    }\n                }\n                return false;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private between(x: number, min: number, max: number) {\n        return x >= min && x < max;\n    }\n\n    private isIMessage(arg: any): arg is IMessage {\n        const status = arg.message !== undefined;\n        return status;\n    }\n\n    private isNumber(text: string): boolean {\n        if (text) {\n            const pattern = /^\\d+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[a-zA-Z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isUppercaseLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[A-Z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isLowercaseLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[a-z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isSymbol(text: string): boolean {\n        if (text) {\n            return !this.isNumber(text) && !this.isLetter(text);\n        }\n        return false;\n    }\n\n    private getSymbols(text: string): string | undefined {\n        let result = '';\n        if (text) {\n            for (let index = 0; index < text.length; index++) {\n                if (this.isSymbol(text[index])) result += text[index];\n            }\n        }\n        if (result.length === 0) return undefined;\n        return result;\n    }\n\n    private getLengthScore(text: string): number {\n        if (text) {\n            // +(n*9)\n            const ratio = 9;\n            return this.getLength(text) * ratio;\n        }\n        return 0;\n    }\n    private getUppercaseLettersScore(text: string): number {\n        if (text) {\n            // +((len-n)*2)\n            const ratio = 2;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isUppercaseLetter(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getLowercaseLettersScore(text: string): number {\n        if (text) {\n            // +((len-n)*2)\n            const ratio = 2;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isLowercaseLetter(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getNumbersScore(text: string): number {\n        if (text) {\n            // +((len-n)*4)\n            const ratio = 4;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isNumber(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getSymbolsScore(text: string): number {\n        if (text) {\n            // +((len-n)*6)\n            const ratio = 6;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isSymbol(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n\n    private getLettersOnlyScore(text: string): number {\n        if (text) {\n            // -n\n            const ratio = -1;\n            if (this.isLetter(text)) {\n                return this.getLength(text) * ratio;\n            }\n        }\n        return 0;\n    }\n\n    private getNumbersOnlyScore(text: string): number {\n        if (text) {\n            // -n\n            const ratio = -1;\n            if (this.isNumber(text)) {\n                return this.getLength(text) * ratio;\n            }\n        }\n        return 0;\n    }\n\n    private getConsecutiveUppercaseLettersScore(text: string): number {\n        if (text) {\n            const pattern = /[A-Z]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private getConsecutiveLowercaseLettersScore(text: string): number {\n        if (text) {\n            const pattern = /[a-z]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private getConsecutiveNumbersScore(text: string): number {\n        if (text) {\n            const pattern = /[0-9]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private reverseString(str: string): string {\n        return str.split('').reverse().join('');\n    }\n\n    private sequentialBuilder(text: string, minChunk: number): string[] {\n        if (text) {\n            const list: string[] = [];\n            const len = text.split('').length - minChunk;\n            for (let i = 0; i < len; i++) {\n                for (let index = 0; index < len; index++) {\n                    const newText = text.substring(index, text.length);\n                    const arr = this.chunkString(newText, i + minChunk);\n                    for (let j = 0; j < arr.length; j++) {\n                        list.push(arr[j]);\n                        list.push(this.reverseString(arr[j]));\n                    }\n                }\n            }\n            const result = this.distinctArray(this.sortByLength(list, minChunk));\n            return result;\n        }\n        return [];\n    }\n\n    private distinctArray(arr: string[]): string[] {\n        const a = [];\n        for (let i = 0, l = arr.length; i < l; i++) if (a.indexOf(arr[i]) === -1 && arr[i] !== '') a.push(arr[i]);\n        return a;\n    }\n\n    private sortByLength(arr: string[], limit?: number): string[] {\n        arr.sort(function (a, b) {\n            return b.length - a.length;\n        });\n        const list: string[] = [];\n        for (let index = 0; index < arr.length; index++) {\n            if (limit) {\n                if (arr[index].length >= limit) {\n                    list.push(arr[index]);\n                }\n            } else {\n                list.push(arr[index]);\n            }\n        }\n        return list;\n    }\n\n    private getSequentialLettersScore(text: string): number {\n        const minChunk = 3;\n        if (text) {\n            const uStr = this.sequentialBuilder(this.uppercaseLetters, minChunk);\n            const lStr = this.sequentialBuilder(this.lowercaseLetters, minChunk);\n            let score = 0;\n            let uTxt = text;\n            let lTxt = text;\n            uStr.forEach((value) => {\n                if (uTxt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    uTxt = uTxt.replace(value, '');\n                }\n            });\n            lStr.forEach((value) => {\n                if (lTxt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    lTxt = lTxt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getSequentialNumbersScore(text: string): number {\n        const minChunk = 3;\n        if (text) {\n            const num = this.sequentialBuilder(this.numbers, minChunk);\n            let score = 0;\n            let txt = text;\n            num.forEach((value) => {\n                if (txt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    txt = txt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getSequentialSymbolsScore(text: string): number {\n        const minChunk = 3;\n        const sym = this.getSymbols(text);\n        if (text && sym) {\n            const num = this.sequentialBuilder(sym, minChunk);\n            let score = 0;\n            let txt = text;\n            num.forEach((value) => {\n                if (txt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    txt = txt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getRepeatCharactersScore(text: string): number {\n        const pattern = /(.+)(?=.*?\\1)/g;\n        if (text) {\n            const matches = <RegExpMatchArray>text.match(pattern);\n            if (!matches) {\n                return 0;\n            }\n            const maxResultLength = this.sortByLength(matches)[0].length;\n            let ratio = 0;\n            if (maxResultLength >= 1 && maxResultLength <= 5) ratio = -8;\n            if (maxResultLength >= 6 && maxResultLength <= 10) ratio = -5;\n            if (maxResultLength >= 11) ratio = -2;\n            // (-X * maxRegexResultLength) + (textLength - (maxRegexResultLength *2))\n            const score = ratio * maxResultLength + (text.length - maxResultLength * 2);\n            return score;\n        }\n        return 0;\n    }\n\n    private getRequirementsScore(text: string, ignoreCase: boolean): string[] {\n        const req = this.requirements;\n        const errors: string[] = [];\n        if (req) {\n            const minLengthMsg = 'The minimum password length is ' + req.minLength + '.';\n            const maxLengthMsg = 'The maximum password length is ' + req.maxLength + '.';\n            const uppercaseLettersMinLengthMsg =\n                'You must use at least ' + req.uppercaseLettersMinLength + ' uppercase letter(s).';\n            const lowercaseLettersMinLengthMsg =\n                'You must use at least ' + req.lowercaseLettersMinLength + ' lowercase letter(s).';\n            const numbersMinLengthMsg = 'You must use at least ' + req.numbersMinLength + ' number(s).';\n            const symbolsMinLengthMsg = 'You must use at least ' + req.symbolsMinLength + ' symbol(s).';\n            const includeMsg = 'The Password must include all the items specified.';\n            const excludeMsg = 'The Password must exclude all the items specified.';\n            const startsWithMsg = 'The password must start with ' + req.startsWith + '.';\n            const endsWithMsg = 'The password must end with ' + req.endsWith + '.';\n            const blackListMsg = 'Your password is in the blacklist.';\n            const includeOneMsg = 'The Password must include at least one item specified [' + req.includeOne + '] .';\n\n            const uniqueLettersMinLength = 'You must use at least ' + req.uniqueLettersMinLength + ' unique letter(s).';\n\n            const upperCount = (text.match(/[A-Z]/g) || []).length;\n            const lowerCount = (text.match(/[a-z]/g) || []).length;\n            const numbersCount = (text.match(/[0-9]/g) || []).length;\n            const symbolsCount = text.length - (upperCount + lowerCount + numbersCount);\n\n            if (req.minLength) {\n                let val: number;\n                let msg = minLengthMsg;\n                if (this.isIMessage(req.minLength)) {\n                    val = <number>req.minLength.value;\n                    msg = <string>req.minLength.message;\n                } else {\n                    val = <number>req.minLength;\n                }\n                if (req.minLength && text.length < val) {\n                    errors.push(msg);\n                }\n            }\n            if (req.maxLength) {\n                let val: number;\n                let msg = maxLengthMsg;\n                if (this.isIMessage(req.maxLength)) {\n                    val = <number>req.maxLength.value;\n                    msg = <string>req.maxLength.message;\n                } else {\n                    val = <number>req.maxLength;\n                }\n                if (req.maxLength && text.length > val) {\n                    errors.push(msg);\n                }\n            }\n            if (req.startsWith) {\n                let val: string;\n                let msg = startsWithMsg;\n                if (this.isIMessage(req.startsWith)) {\n                    val = <string>req.startsWith.value;\n                    msg = <string>req.startsWith.message;\n                } else {\n                    val = <string>req.startsWith;\n                }\n                if (!this.startsWith(text, val)) {\n                    errors.push(msg);\n                }\n            }\n            if (req.endsWith) {\n                let val: string;\n                let msg = endsWithMsg;\n                if (this.isIMessage(req.endsWith)) {\n                    val = <string>req.endsWith.value;\n                    msg = <string>req.endsWith.message;\n                } else {\n                    val = <string>req.endsWith;\n                }\n                if (!this.endsWith(text, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.uppercaseLettersMinLength) {\n                let val: number;\n                let msg = uppercaseLettersMinLengthMsg;\n                if (this.isIMessage(req.uppercaseLettersMinLength)) {\n                    val = <number>req.uppercaseLettersMinLength.value;\n                    msg = <string>req.uppercaseLettersMinLength.message;\n                } else {\n                    val = <number>req.uppercaseLettersMinLength;\n                }\n                if (val > upperCount) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.lowercaseLettersMinLength) {\n                let val: number;\n                let msg = lowercaseLettersMinLengthMsg;\n                if (this.isIMessage(req.lowercaseLettersMinLength)) {\n                    val = <number>req.lowercaseLettersMinLength.value;\n                    msg = <string>req.lowercaseLettersMinLength.message;\n                } else {\n                    val = <number>req.lowercaseLettersMinLength;\n                }\n                if (val > lowerCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.numbersMinLength) {\n                let val: number;\n                let msg = numbersMinLengthMsg;\n                if (this.isIMessage(req.numbersMinLength)) {\n                    val = <number>req.numbersMinLength.value;\n                    msg = <string>req.numbersMinLength.message;\n                } else {\n                    val = <number>req.numbersMinLength;\n                }\n                if (val > numbersCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.symbolsMinLength) {\n                let val: number;\n                let msg = symbolsMinLengthMsg;\n                if (this.isIMessage(req.symbolsMinLength)) {\n                    val = <number>req.symbolsMinLength.value;\n                    msg = <string>req.symbolsMinLength.message;\n                } else {\n                    val = <number>req.symbolsMinLength;\n                }\n                if (val > symbolsCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.uniqueLettersMinLength) {\n                let val: number;\n                let msg = uniqueLettersMinLength;\n                if (this.isIMessage(req.uniqueLettersMinLength)) {\n                    val = <number>req.uniqueLettersMinLength.value;\n                    msg = <string>req.uniqueLettersMinLength.message;\n                } else {\n                    val = <number>req.uniqueLettersMinLength;\n                }\n                const isValid = Array.from(new Set(text.split(''))).length >= val;\n                if (req.uniqueLettersMinLength && !isValid) {\n                    errors.push(msg);\n                }\n            }\n            if (req.include) {\n                let val: string[];\n                let msg = includeMsg;\n                if (this.isIMessage(req.include)) {\n                    val = <string[]>req.include.value;\n                    msg = <string>req.include.message;\n                } else {\n                    val = <string[]>req.include;\n                }\n                if (!this.contains(text, val)) {\n                    errors.push(msg);\n                }\n            }\n            if (req.exclude) {\n                let txt = text;\n                let val: string[];\n                let msg = excludeMsg;\n                if (this.isIMessage(req.exclude)) {\n                    val = <string[]>req.exclude.value;\n                    msg = <string>req.exclude.message;\n                } else {\n                    val = <string[]>req.exclude;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (!this.doesNotContains(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.blackList) {\n                let txt = text;\n                let val: string[];\n                let msg = blackListMsg;\n                if (this.isIMessage(req.blackList)) {\n                    val = <string[]>req.blackList.value;\n                    msg = <string>req.blackList.message;\n                } else {\n                    val = <string[]>req.blackList;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (this.isInBlackList(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.includeOne) {\n                let txt = text;\n                let val: string[];\n                let msg = includeOneMsg;\n                if (this.isIMessage(req.includeOne)) {\n                    val = <string[]>req.includeOne.value;\n                    msg = <string>req.includeOne.message;\n                } else {\n                    val = <string[]>req.includeOne;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (!this.containsOne(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            return errors;\n        }\n        return [];\n    }\n\n    public getResults(passwords: string[], ignoreCase = false, skipReq = false): IResult[] {\n        const results = [];\n        if (passwords && passwords.length > 0) {\n            for (let index = 0; index < passwords.length; index++) {\n                results.push(this.getResult(passwords[index], ignoreCase, skipReq));\n            }\n            return results;\n        }\n        return [];\n    }\n\n    public getResult(password: string, ignoreCase = false, skipReq = false): IResult {\n        if (password) {\n            // Requirements\n            const req = this.getRequirementsScore(password, ignoreCase);\n            if (!skipReq && req.length) {\n                return {\n                    score: -1,\n                    status: 'needs requirement(s)',\n                    errors: req,\n                    percent: 0,\n                };\n            }\n            // Additions\n            const len = this.getLengthScore(password);\n            const upper = this.getUppercaseLettersScore(password);\n            const lower = this.getLowercaseLettersScore(password);\n            const num = this.getNumbersScore(password);\n            const symbol = this.getSymbolsScore(password);\n            // Deductions\n            const letterOnly = this.getLettersOnlyScore(password);\n            const numberOnly = this.getNumbersOnlyScore(password);\n            const repetition = this.getRepeatCharactersScore(password);\n            const consecutiveUpper = this.getConsecutiveUppercaseLettersScore(password);\n            const consecutiveLower = this.getConsecutiveLowercaseLettersScore(password);\n            const consecutiveNumber = this.getConsecutiveNumbersScore(password);\n            const seqLetters = this.getSequentialLettersScore(password);\n            const seqNumbers = this.getSequentialNumbersScore(password);\n            const seqSymbols = this.getSequentialSymbolsScore(password);\n\n            const score =\n                len +\n                upper +\n                lower +\n                num +\n                symbol +\n                letterOnly +\n                numberOnly +\n                repetition +\n                consecutiveUpper +\n                consecutiveLower +\n                consecutiveNumber +\n                seqLetters +\n                seqNumbers +\n                seqSymbols;\n\n            const defaultRanges = {\n                '40': 'veryWeak', // 001 <= x <  040\n                '80': 'weak', // 040 <= x <  080\n                '120': 'medium', // 080 <= x <  120\n                '180': 'strong', // 120 <= x <  180\n                '200': 'veryStrong', // 180 <= x <  200\n                _: 'perfect', //          >= 200\n            };\n            let stat = '';\n            if (!this.scoreRange) {\n                this.scoreRange = defaultRanges;\n            }\n\n            const range = Object.keys(this.scoreRange).sort(function (a: any, b: any) {\n                if (isNaN(a) || isNaN(b)) {\n                    if (a > b) return 1;\n                    else return -1;\n                }\n                return a - b;\n            });\n            if (range.length < 2) {\n                return {\n                    score: -2,\n                    status: 'error',\n                    errors: '\"scoreRange\" must have at least two members.',\n                    percent: 0,\n                };\n            }\n            for (let index = 0; index < range.length; index++) {\n                const key: any = range[index];\n                if (key != undefined) {\n                    if (index == 0) {\n                        if (this.between(score, 1, parseFloat(range[index]))) {\n                            stat = this.scoreRange[range[0]];\n                            break;\n                        }\n                    }\n                    if (index === range.length - 1) {\n                        if (range[index] == '_') {\n                            if (this.between(score, parseFloat(range[index - 1]), 1000000000000000000)) {\n                                stat = this.scoreRange[range[range.length - 1]];\n                                break;\n                            }\n                        } else {\n                            return {\n                                score: -2,\n                                status: 'error',\n                                errors: 'The last member of the \"scoreRange\" must be \"_\".',\n                                percent: 0,\n                            };\n                        }\n                    }\n                    if (this.between(score, parseFloat(range[index - 1]), parseFloat(range[index]))) {\n                        stat = this.scoreRange[range[index]];\n                        break;\n                    }\n                }\n            }\n            const percent = (score * 100) / parseFloat(range[range.length - 2]);\n\n            let data = {\n                score: score,\n                status: stat,\n                percent: percent >= 100 ? 100 : percent,\n            };\n\n            if (skipReq) {\n                data = Object.assign(data, { errors: req });\n            }\n\n            return data;\n        }\n        return {\n            score: 0,\n            status: 'Empty',\n            percent: 0,\n        };\n    }\n}\n"],"names":["requirements","scoreRange","this","PasswordMeter","str","word","lastIndexOf","indexOf","length","len","_size","Math","ceil","_ret","Array","_offset","_i","substring","text","list","every","x","some","index","min","max","arg","undefined","message","test","isNumber","isLetter","result","isSymbol","getLength","n_1","split","forEach","value","_this","isUppercaseLetter","n_2","isLowercaseLetter","n_3","n_4","results","match","score_1","score_2","score_3","reverse","join","minChunk","i","newText","arr","chunkString","j","push","reverseString","distinctArray","sortByLength","a","l","limit","sort","b","uStr","sequentialBuilder","uppercaseLetters","lStr","lowercaseLetters","score_4","uTxt_1","lTxt_1","replace","num","numbers","score_5","txt_1","sym","getSymbols","score_6","txt_2","matches","maxResultLength","ratio","ignoreCase","req","errors","minLengthMsg","minLength","maxLengthMsg","maxLength","uppercaseLettersMinLengthMsg","uppercaseLettersMinLength","lowercaseLettersMinLengthMsg","lowercaseLettersMinLength","numbersMinLengthMsg","numbersMinLength","symbolsMinLengthMsg","symbolsMinLength","startsWithMsg","startsWith","endsWithMsg","endsWith","includeOneMsg","includeOne","uniqueLettersMinLength","upperCount","lowerCount","numbersCount","symbolsCount","val","msg","isIMessage","isValid","from","Set","include","contains","exclude","txt","toLowerCase","map","v","doesNotContains","blackList","isInBlackList","containsOne","passwords","skipReq","getResult","password","getRequirementsScore","score","status","percent","getLengthScore","getUppercaseLettersScore","getLowercaseLettersScore","getNumbersScore","getSymbolsScore","getLettersOnlyScore","getNumbersOnlyScore","getRepeatCharactersScore","getConsecutiveUppercaseLettersScore","getConsecutiveLowercaseLettersScore","getConsecutiveNumbersScore","getSequentialLettersScore","getSequentialNumbersScore","getSequentialSymbolsScore","stat","_","range","Object","keys","isNaN","between","parseFloat","data","assign"],"mappings":"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"}