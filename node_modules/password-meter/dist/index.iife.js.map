{"version":3,"file":"index.iife.js","sources":["../src/index.ts"],"sourcesContent":["export interface IRequirement {\n    minLength?: number | IMessage;\n    maxLength?: number | IMessage;\n    uniqueLettersMinLength?: number | IMessage;\n    uppercaseLettersMinLength?: number | IMessage;\n    lowercaseLettersMinLength?: number | IMessage;\n    numbersMinLength?: number | IMessage;\n    symbolsMinLength?: number | IMessage;\n    include?: string[] | IMessage;\n    exclude?: string[] | IMessage;\n    blackList?: string[] | IMessage;\n    startsWith?: string | IMessage;\n    endsWith?: string | IMessage;\n    includeOne?: string[] | IMessage;\n}\n\nexport interface IMessage {\n    value: number | string | string[];\n    message: string;\n}\n\nexport interface IResult {\n    score: number;\n    status: string;\n    percent: number;\n    errors?: string | string[];\n}\n\nexport class PasswordMeter {\n    private uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    private lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\n    private numbers = '1234567890';\n    constructor(public requirements?: IRequirement, public scoreRange?: any) {}\n\n    private startsWith(str: string, word: string): boolean {\n        return str.lastIndexOf(word, 0) === 0;\n    }\n\n    private endsWith(str: string, word: string): boolean {\n        return str.indexOf(word, str.length - word.length) !== -1;\n    }\n\n    private chunkString(str: string, len: number): string[] {\n        const _size = Math.ceil(str.length / len),\n            _ret = new Array(_size);\n        let _offset = 0;\n        for (let _i = 0; _i < _size; _i++) {\n            _offset = _i * len;\n            _ret[_i] = str.substring(_offset, _offset + len);\n        }\n        return _ret;\n    }\n    private getLength(text: string): number {\n        if (text) {\n            return text.length;\n        }\n        return 0;\n    }\n    private doesNotContains(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const doesnotContainsAll = list.every((x) => text.indexOf(x) == -1);\n                return doesnotContainsAll;\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n    private contains(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const containsAll = list.every((x) => text.indexOf(x) >= 0);\n                return containsAll;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    private containsOne(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                const contains = list.some((x) => text.indexOf(x) >= 0);\n                return contains;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private isInBlackList(text: string, list: string[]): boolean {\n        if (text) {\n            if (list) {\n                for (let index = 0; index < list.length; index++) {\n                    if (text === list[index]) {\n                        return true;\n                    }\n                }\n                return false;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private between(x: number, min: number, max: number) {\n        return x >= min && x < max;\n    }\n\n    private isIMessage(arg: any): arg is IMessage {\n        const status = arg.message !== undefined;\n        return status;\n    }\n\n    private isNumber(text: string): boolean {\n        if (text) {\n            const pattern = /^\\d+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[a-zA-Z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isUppercaseLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[A-Z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isLowercaseLetter(text: string): boolean {\n        if (text) {\n            const pattern = /^[a-z]+$/;\n            return pattern.test(text);\n        }\n        return false;\n    }\n\n    private isSymbol(text: string): boolean {\n        if (text) {\n            return !this.isNumber(text) && !this.isLetter(text);\n        }\n        return false;\n    }\n\n    private getSymbols(text: string): string | undefined {\n        let result = '';\n        if (text) {\n            for (let index = 0; index < text.length; index++) {\n                if (this.isSymbol(text[index])) result += text[index];\n            }\n        }\n        if (result.length === 0) return undefined;\n        return result;\n    }\n\n    private getLengthScore(text: string): number {\n        if (text) {\n            // +(n*9)\n            const ratio = 9;\n            return this.getLength(text) * ratio;\n        }\n        return 0;\n    }\n    private getUppercaseLettersScore(text: string): number {\n        if (text) {\n            // +((len-n)*2)\n            const ratio = 2;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isUppercaseLetter(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getLowercaseLettersScore(text: string): number {\n        if (text) {\n            // +((len-n)*2)\n            const ratio = 2;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isLowercaseLetter(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getNumbersScore(text: string): number {\n        if (text) {\n            // +((len-n)*4)\n            const ratio = 4;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isNumber(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n    private getSymbolsScore(text: string): number {\n        if (text) {\n            // +((len-n)*6)\n            const ratio = 6;\n            let n = 0;\n            text.split('').forEach((value) => {\n                if (this.isSymbol(value)) {\n                    n++;\n                }\n            });\n            if (n == 0) {\n                return 0;\n            }\n            return (this.getLength(text) - n) * ratio;\n        }\n        return 0;\n    }\n\n    private getLettersOnlyScore(text: string): number {\n        if (text) {\n            // -n\n            const ratio = -1;\n            if (this.isLetter(text)) {\n                return this.getLength(text) * ratio;\n            }\n        }\n        return 0;\n    }\n\n    private getNumbersOnlyScore(text: string): number {\n        if (text) {\n            // -n\n            const ratio = -1;\n            if (this.isNumber(text)) {\n                return this.getLength(text) * ratio;\n            }\n        }\n        return 0;\n    }\n\n    private getConsecutiveUppercaseLettersScore(text: string): number {\n        if (text) {\n            const pattern = /[A-Z]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private getConsecutiveLowercaseLettersScore(text: string): number {\n        if (text) {\n            const pattern = /[a-z]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private getConsecutiveNumbersScore(text: string): number {\n        if (text) {\n            const pattern = /[0-9]+/g;\n            const results = <RegExpMatchArray>text.match(pattern);\n            if (!results) {\n                return 0;\n            }\n            let score = 0;\n            const ratio = -2;\n            results.forEach((value) => {\n                if (this.getLength(value) > 1) {\n                    // -(n*2)\n                    score +=\n                        (this.getLength(value) - 1) *\n                        /*There is no problem with a character, but the remaining repetition creates the problem.*/\n                        ratio;\n                }\n            });\n            return score;\n        }\n        return 0;\n    }\n    private reverseString(str: string): string {\n        return str.split('').reverse().join('');\n    }\n\n    private sequentialBuilder(text: string, minChunk: number): string[] {\n        if (text) {\n            const list: string[] = [];\n            const len = text.split('').length - minChunk;\n            for (let i = 0; i < len; i++) {\n                for (let index = 0; index < len; index++) {\n                    const newText = text.substring(index, text.length);\n                    const arr = this.chunkString(newText, i + minChunk);\n                    for (let j = 0; j < arr.length; j++) {\n                        list.push(arr[j]);\n                        list.push(this.reverseString(arr[j]));\n                    }\n                }\n            }\n            const result = this.distinctArray(this.sortByLength(list, minChunk));\n            return result;\n        }\n        return [];\n    }\n\n    private distinctArray(arr: string[]): string[] {\n        const a = [];\n        for (let i = 0, l = arr.length; i < l; i++) if (a.indexOf(arr[i]) === -1 && arr[i] !== '') a.push(arr[i]);\n        return a;\n    }\n\n    private sortByLength(arr: string[], limit?: number): string[] {\n        arr.sort(function (a, b) {\n            return b.length - a.length;\n        });\n        const list: string[] = [];\n        for (let index = 0; index < arr.length; index++) {\n            if (limit) {\n                if (arr[index].length >= limit) {\n                    list.push(arr[index]);\n                }\n            } else {\n                list.push(arr[index]);\n            }\n        }\n        return list;\n    }\n\n    private getSequentialLettersScore(text: string): number {\n        const minChunk = 3;\n        if (text) {\n            const uStr = this.sequentialBuilder(this.uppercaseLetters, minChunk);\n            const lStr = this.sequentialBuilder(this.lowercaseLetters, minChunk);\n            let score = 0;\n            let uTxt = text;\n            let lTxt = text;\n            uStr.forEach((value) => {\n                if (uTxt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    uTxt = uTxt.replace(value, '');\n                }\n            });\n            lStr.forEach((value) => {\n                if (lTxt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    lTxt = lTxt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getSequentialNumbersScore(text: string): number {\n        const minChunk = 3;\n        if (text) {\n            const num = this.sequentialBuilder(this.numbers, minChunk);\n            let score = 0;\n            let txt = text;\n            num.forEach((value) => {\n                if (txt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    txt = txt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getSequentialSymbolsScore(text: string): number {\n        const minChunk = 3;\n        const sym = this.getSymbols(text);\n        if (text && sym) {\n            const num = this.sequentialBuilder(sym, minChunk);\n            let score = 0;\n            let txt = text;\n            num.forEach((value) => {\n                if (txt.indexOf(value) != -1) {\n                    score += value.length - (minChunk - 1);\n                    txt = txt.replace(value, '');\n                }\n            });\n            // -(n*3)\n            const ratio = -3;\n            return score * ratio;\n        }\n        return 0;\n    }\n\n    private getRepeatCharactersScore(text: string): number {\n        const pattern = /(.+)(?=.*?\\1)/g;\n        if (text) {\n            const matches = <RegExpMatchArray>text.match(pattern);\n            if (!matches) {\n                return 0;\n            }\n            const maxResultLength = this.sortByLength(matches)[0].length;\n            let ratio = 0;\n            if (maxResultLength >= 1 && maxResultLength <= 5) ratio = -8;\n            if (maxResultLength >= 6 && maxResultLength <= 10) ratio = -5;\n            if (maxResultLength >= 11) ratio = -2;\n            // (-X * maxRegexResultLength) + (textLength - (maxRegexResultLength *2))\n            const score = ratio * maxResultLength + (text.length - maxResultLength * 2);\n            return score;\n        }\n        return 0;\n    }\n\n    private getRequirementsScore(text: string, ignoreCase: boolean): string[] {\n        const req = this.requirements;\n        const errors: string[] = [];\n        if (req) {\n            const minLengthMsg = 'The minimum password length is ' + req.minLength + '.';\n            const maxLengthMsg = 'The maximum password length is ' + req.maxLength + '.';\n            const uppercaseLettersMinLengthMsg =\n                'You must use at least ' + req.uppercaseLettersMinLength + ' uppercase letter(s).';\n            const lowercaseLettersMinLengthMsg =\n                'You must use at least ' + req.lowercaseLettersMinLength + ' lowercase letter(s).';\n            const numbersMinLengthMsg = 'You must use at least ' + req.numbersMinLength + ' number(s).';\n            const symbolsMinLengthMsg = 'You must use at least ' + req.symbolsMinLength + ' symbol(s).';\n            const includeMsg = 'The Password must include all the items specified.';\n            const excludeMsg = 'The Password must exclude all the items specified.';\n            const startsWithMsg = 'The password must start with ' + req.startsWith + '.';\n            const endsWithMsg = 'The password must end with ' + req.endsWith + '.';\n            const blackListMsg = 'Your password is in the blacklist.';\n            const includeOneMsg = 'The Password must include at least one item specified [' + req.includeOne + '] .';\n\n            const uniqueLettersMinLength = 'You must use at least ' + req.uniqueLettersMinLength + ' unique letter(s).';\n\n            const upperCount = (text.match(/[A-Z]/g) || []).length;\n            const lowerCount = (text.match(/[a-z]/g) || []).length;\n            const numbersCount = (text.match(/[0-9]/g) || []).length;\n            const symbolsCount = text.length - (upperCount + lowerCount + numbersCount);\n\n            if (req.minLength) {\n                let val: number;\n                let msg = minLengthMsg;\n                if (this.isIMessage(req.minLength)) {\n                    val = <number>req.minLength.value;\n                    msg = <string>req.minLength.message;\n                } else {\n                    val = <number>req.minLength;\n                }\n                if (req.minLength && text.length < val) {\n                    errors.push(msg);\n                }\n            }\n            if (req.maxLength) {\n                let val: number;\n                let msg = maxLengthMsg;\n                if (this.isIMessage(req.maxLength)) {\n                    val = <number>req.maxLength.value;\n                    msg = <string>req.maxLength.message;\n                } else {\n                    val = <number>req.maxLength;\n                }\n                if (req.maxLength && text.length > val) {\n                    errors.push(msg);\n                }\n            }\n            if (req.startsWith) {\n                let val: string;\n                let msg = startsWithMsg;\n                if (this.isIMessage(req.startsWith)) {\n                    val = <string>req.startsWith.value;\n                    msg = <string>req.startsWith.message;\n                } else {\n                    val = <string>req.startsWith;\n                }\n                if (!this.startsWith(text, val)) {\n                    errors.push(msg);\n                }\n            }\n            if (req.endsWith) {\n                let val: string;\n                let msg = endsWithMsg;\n                if (this.isIMessage(req.endsWith)) {\n                    val = <string>req.endsWith.value;\n                    msg = <string>req.endsWith.message;\n                } else {\n                    val = <string>req.endsWith;\n                }\n                if (!this.endsWith(text, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.uppercaseLettersMinLength) {\n                let val: number;\n                let msg = uppercaseLettersMinLengthMsg;\n                if (this.isIMessage(req.uppercaseLettersMinLength)) {\n                    val = <number>req.uppercaseLettersMinLength.value;\n                    msg = <string>req.uppercaseLettersMinLength.message;\n                } else {\n                    val = <number>req.uppercaseLettersMinLength;\n                }\n                if (val > upperCount) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.lowercaseLettersMinLength) {\n                let val: number;\n                let msg = lowercaseLettersMinLengthMsg;\n                if (this.isIMessage(req.lowercaseLettersMinLength)) {\n                    val = <number>req.lowercaseLettersMinLength.value;\n                    msg = <string>req.lowercaseLettersMinLength.message;\n                } else {\n                    val = <number>req.lowercaseLettersMinLength;\n                }\n                if (val > lowerCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.numbersMinLength) {\n                let val: number;\n                let msg = numbersMinLengthMsg;\n                if (this.isIMessage(req.numbersMinLength)) {\n                    val = <number>req.numbersMinLength.value;\n                    msg = <string>req.numbersMinLength.message;\n                } else {\n                    val = <number>req.numbersMinLength;\n                }\n                if (val > numbersCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.symbolsMinLength) {\n                let val: number;\n                let msg = symbolsMinLengthMsg;\n                if (this.isIMessage(req.symbolsMinLength)) {\n                    val = <number>req.symbolsMinLength.value;\n                    msg = <string>req.symbolsMinLength.message;\n                } else {\n                    val = <number>req.symbolsMinLength;\n                }\n                if (val > symbolsCount) {\n                    errors.push(msg);\n                }\n            }\n            if (req.uniqueLettersMinLength) {\n                let val: number;\n                let msg = uniqueLettersMinLength;\n                if (this.isIMessage(req.uniqueLettersMinLength)) {\n                    val = <number>req.uniqueLettersMinLength.value;\n                    msg = <string>req.uniqueLettersMinLength.message;\n                } else {\n                    val = <number>req.uniqueLettersMinLength;\n                }\n                const isValid = Array.from(new Set(text.split(''))).length >= val;\n                if (req.uniqueLettersMinLength && !isValid) {\n                    errors.push(msg);\n                }\n            }\n            if (req.include) {\n                let val: string[];\n                let msg = includeMsg;\n                if (this.isIMessage(req.include)) {\n                    val = <string[]>req.include.value;\n                    msg = <string>req.include.message;\n                } else {\n                    val = <string[]>req.include;\n                }\n                if (!this.contains(text, val)) {\n                    errors.push(msg);\n                }\n            }\n            if (req.exclude) {\n                let txt = text;\n                let val: string[];\n                let msg = excludeMsg;\n                if (this.isIMessage(req.exclude)) {\n                    val = <string[]>req.exclude.value;\n                    msg = <string>req.exclude.message;\n                } else {\n                    val = <string[]>req.exclude;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (!this.doesNotContains(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.blackList) {\n                let txt = text;\n                let val: string[];\n                let msg = blackListMsg;\n                if (this.isIMessage(req.blackList)) {\n                    val = <string[]>req.blackList.value;\n                    msg = <string>req.blackList.message;\n                } else {\n                    val = <string[]>req.blackList;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (this.isInBlackList(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            if (req.includeOne) {\n                let txt = text;\n                let val: string[];\n                let msg = includeOneMsg;\n                if (this.isIMessage(req.includeOne)) {\n                    val = <string[]>req.includeOne.value;\n                    msg = <string>req.includeOne.message;\n                } else {\n                    val = <string[]>req.includeOne;\n                }\n                if (ignoreCase) {\n                    txt = text.toLowerCase();\n                    val = val.map((v) => v.toLowerCase());\n                }\n                if (!this.containsOne(txt, val)) {\n                    errors.push(msg);\n                }\n            }\n\n            return errors;\n        }\n        return [];\n    }\n\n    public getResults(passwords: string[], ignoreCase = false, skipReq = false): IResult[] {\n        const results = [];\n        if (passwords && passwords.length > 0) {\n            for (let index = 0; index < passwords.length; index++) {\n                results.push(this.getResult(passwords[index], ignoreCase, skipReq));\n            }\n            return results;\n        }\n        return [];\n    }\n\n    public getResult(password: string, ignoreCase = false, skipReq = false): IResult {\n        if (password) {\n            // Requirements\n            const req = this.getRequirementsScore(password, ignoreCase);\n            if (!skipReq && req.length) {\n                return {\n                    score: -1,\n                    status: 'needs requirement(s)',\n                    errors: req,\n                    percent: 0,\n                };\n            }\n            // Additions\n            const len = this.getLengthScore(password);\n            const upper = this.getUppercaseLettersScore(password);\n            const lower = this.getLowercaseLettersScore(password);\n            const num = this.getNumbersScore(password);\n            const symbol = this.getSymbolsScore(password);\n            // Deductions\n            const letterOnly = this.getLettersOnlyScore(password);\n            const numberOnly = this.getNumbersOnlyScore(password);\n            const repetition = this.getRepeatCharactersScore(password);\n            const consecutiveUpper = this.getConsecutiveUppercaseLettersScore(password);\n            const consecutiveLower = this.getConsecutiveLowercaseLettersScore(password);\n            const consecutiveNumber = this.getConsecutiveNumbersScore(password);\n            const seqLetters = this.getSequentialLettersScore(password);\n            const seqNumbers = this.getSequentialNumbersScore(password);\n            const seqSymbols = this.getSequentialSymbolsScore(password);\n\n            const score =\n                len +\n                upper +\n                lower +\n                num +\n                symbol +\n                letterOnly +\n                numberOnly +\n                repetition +\n                consecutiveUpper +\n                consecutiveLower +\n                consecutiveNumber +\n                seqLetters +\n                seqNumbers +\n                seqSymbols;\n\n            const defaultRanges = {\n                '40': 'veryWeak', // 001 <= x <  040\n                '80': 'weak', // 040 <= x <  080\n                '120': 'medium', // 080 <= x <  120\n                '180': 'strong', // 120 <= x <  180\n                '200': 'veryStrong', // 180 <= x <  200\n                _: 'perfect', //          >= 200\n            };\n            let stat = '';\n            if (!this.scoreRange) {\n                this.scoreRange = defaultRanges;\n            }\n\n            const range = Object.keys(this.scoreRange).sort(function (a: any, b: any) {\n                if (isNaN(a) || isNaN(b)) {\n                    if (a > b) return 1;\n                    else return -1;\n                }\n                return a - b;\n            });\n            if (range.length < 2) {\n                return {\n                    score: -2,\n                    status: 'error',\n                    errors: '\"scoreRange\" must have at least two members.',\n                    percent: 0,\n                };\n            }\n            for (let index = 0; index < range.length; index++) {\n                const key: any = range[index];\n                if (key != undefined) {\n                    if (index == 0) {\n                        if (this.between(score, 1, parseFloat(range[index]))) {\n                            stat = this.scoreRange[range[0]];\n                            break;\n                        }\n                    }\n                    if (index === range.length - 1) {\n                        if (range[index] == '_') {\n                            if (this.between(score, parseFloat(range[index - 1]), 1000000000000000000)) {\n                                stat = this.scoreRange[range[range.length - 1]];\n                                break;\n                            }\n                        } else {\n                            return {\n                                score: -2,\n                                status: 'error',\n                                errors: 'The last member of the \"scoreRange\" must be \"_\".',\n                                percent: 0,\n                            };\n                        }\n                    }\n                    if (this.between(score, parseFloat(range[index - 1]), parseFloat(range[index]))) {\n                        stat = this.scoreRange[range[index]];\n                        break;\n                    }\n                }\n            }\n            const percent = (score * 100) / parseFloat(range[range.length - 2]);\n\n            let data = {\n                score: score,\n                status: stat,\n                percent: percent >= 100 ? 100 : percent,\n            };\n\n            if (skipReq) {\n                data = Object.assign(data, { errors: req });\n            }\n\n            return data;\n        }\n        return {\n            score: 0,\n            status: 'Empty',\n            percent: 0,\n        };\n    }\n}\n"],"names":[],"mappings":"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"}